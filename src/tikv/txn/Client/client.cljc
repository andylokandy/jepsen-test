;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC tikv.txn.Client Client Implementation
;;;----------------------------------------------------------------------------------
(ns tikv.txn.Client.client
  (:require [tikv.txn :refer :all]
            [tikv.error :as tikv.error]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn BeginTxn
  ([client params] (BeginTxn client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "tikv.txn.Client"
              :method  "BeginTxn"
              :input   {:f tikv.txn/new-BeginTxnRequest :ch input}
              :output  {:f tikv.txn/pb->BeginTxnReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn Get
  ([client params] (Get client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "tikv.txn.Client"
              :method  "Get"
              :input   {:f tikv.txn/new-GetRequest :ch input}
              :output  {:f tikv.txn/pb->GetReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn Put
  ([client params] (Put client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "tikv.txn.Client"
              :method  "Put"
              :input   {:f tikv.txn/new-PutRequest :ch input}
              :output  {:f tikv.txn/pb->PutReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn Commit
  ([client params] (Commit client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "tikv.txn.Client"
              :method  "Commit"
              :input   {:f tikv.txn/new-CommitRequest :ch input}
              :output  {:f tikv.txn/pb->CommitReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn Rollback
  ([client params] (Rollback client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "tikv.txn.Client"
              :method  "Rollback"
              :input   {:f tikv.txn/new-RollbackRequest :ch input}
              :output  {:f tikv.txn/pb->RollbackReply :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

