;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package tikv.error
;;;----------------------------------------------------------------------------------
(ns tikv.error
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Error)
(declare ecis->Error)
(declare new-Error)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Error
;-----------------------------------------------------------------------------
(defrecord Error-record [undetermined not-found aborted]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:undetermined this) os)
    (serdes.core/write-String 2  {:optimize true} (:not-found this) os)
    (serdes.core/write-String 3  {:optimize true} (:aborted this) os))
  pb/TypeReflection
  (gettype [this]
    "tikv.error.Error"))

(s/def :tikv.error.Error/undetermined string?)
(s/def :tikv.error.Error/not-found string?)
(s/def :tikv.error.Error/aborted string?)
(s/def ::Error-spec (s/keys :opt-un [:tikv.error.Error/undetermined :tikv.error.Error/not-found :tikv.error.Error/aborted ]))
(def Error-defaults {:undetermined "" :not-found "" :aborted "" })

(defn cis->Error
  "CodedInputStream to Error"
  [is]
  (->> (tag-map Error-defaults
         (fn [tag index]
             (case index
               1 [:undetermined (serdes.core/cis->String is)]
               2 [:not-found (serdes.core/cis->String is)]
               3 [:aborted (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Error-record)))

(defn ecis->Error
  "Embedded CodedInputStream to Error"
  [is]
  (serdes.core/cis->embedded cis->Error is))

(defn new-Error
  "Creates a new instance from a map, similar to map->Error except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Error-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Error-spec init))))]}
  (-> (merge Error-defaults init)
      (map->Error-record)))

(defn pb->Error
  "Protobuf to Error"
  [input]
  (cis->Error (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Error-meta {:type "tikv.error.Error" :decoder pb->Error})

