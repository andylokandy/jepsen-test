;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package tikv.raw
;;;----------------------------------------------------------------------------------
(ns tikv.raw
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [tikv.error :as tikv.error]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->GetRequest)
(declare ecis->GetRequest)
(declare new-GetRequest)
(declare cis->GetReply)
(declare ecis->GetReply)
(declare new-GetReply)
(declare cis->PutRequest)
(declare ecis->PutRequest)
(declare new-PutRequest)
(declare cis->PutReply)
(declare ecis->PutReply)
(declare new-PutReply)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; GetRequest
;-----------------------------------------------------------------------------
(defrecord GetRequest-record [key]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:key this) os))
  pb/TypeReflection
  (gettype [this]
    "tikv.raw.GetRequest"))

(s/def :tikv.raw.GetRequest/key string?)
(s/def ::GetRequest-spec (s/keys :opt-un [:tikv.raw.GetRequest/key ]))
(def GetRequest-defaults {:key "" })

(defn cis->GetRequest
  "CodedInputStream to GetRequest"
  [is]
  (->> (tag-map GetRequest-defaults
         (fn [tag index]
             (case index
               1 [:key (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->GetRequest-record)))

(defn ecis->GetRequest
  "Embedded CodedInputStream to GetRequest"
  [is]
  (serdes.core/cis->embedded cis->GetRequest is))

(defn new-GetRequest
  "Creates a new instance from a map, similar to map->GetRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GetRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GetRequest-spec init))))]}
  (-> (merge GetRequest-defaults init)
      (map->GetRequest-record)))

(defn pb->GetRequest
  "Protobuf to GetRequest"
  [input]
  (cis->GetRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record GetRequest-meta {:type "tikv.raw.GetRequest" :decoder pb->GetRequest})

;-----------------------------------------------------------------------------
; GetReply
;-----------------------------------------------------------------------------
(defrecord GetReply-record [value error]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:value this) os)
    (serdes.core/write-embedded 2 (:error this) os))
  pb/TypeReflection
  (gettype [this]
    "tikv.raw.GetReply"))

(s/def :tikv.raw.GetReply/value string?)

(s/def ::GetReply-spec (s/keys :opt-un [:tikv.raw.GetReply/value ]))
(def GetReply-defaults {:value "" })

(defn cis->GetReply
  "CodedInputStream to GetReply"
  [is]
  (->> (tag-map GetReply-defaults
         (fn [tag index]
             (case index
               1 [:value (serdes.core/cis->String is)]
               2 [:error (tikv.error/ecis->Error is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->GetReply-record)))

(defn ecis->GetReply
  "Embedded CodedInputStream to GetReply"
  [is]
  (serdes.core/cis->embedded cis->GetReply is))

(defn new-GetReply
  "Creates a new instance from a map, similar to map->GetReply except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::GetReply-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::GetReply-spec init))))]}
  (-> (merge GetReply-defaults init)
      (cond-> (some? (get init :error)) (update :error tikv.error/new-Error))
      (map->GetReply-record)))

(defn pb->GetReply
  "Protobuf to GetReply"
  [input]
  (cis->GetReply (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record GetReply-meta {:type "tikv.raw.GetReply" :decoder pb->GetReply})

;-----------------------------------------------------------------------------
; PutRequest
;-----------------------------------------------------------------------------
(defrecord PutRequest-record [key value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:key this) os)
    (serdes.core/write-String 2  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "tikv.raw.PutRequest"))

(s/def :tikv.raw.PutRequest/key string?)
(s/def :tikv.raw.PutRequest/value string?)
(s/def ::PutRequest-spec (s/keys :opt-un [:tikv.raw.PutRequest/key :tikv.raw.PutRequest/value ]))
(def PutRequest-defaults {:key "" :value "" })

(defn cis->PutRequest
  "CodedInputStream to PutRequest"
  [is]
  (->> (tag-map PutRequest-defaults
         (fn [tag index]
             (case index
               1 [:key (serdes.core/cis->String is)]
               2 [:value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->PutRequest-record)))

(defn ecis->PutRequest
  "Embedded CodedInputStream to PutRequest"
  [is]
  (serdes.core/cis->embedded cis->PutRequest is))

(defn new-PutRequest
  "Creates a new instance from a map, similar to map->PutRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::PutRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::PutRequest-spec init))))]}
  (-> (merge PutRequest-defaults init)
      (map->PutRequest-record)))

(defn pb->PutRequest
  "Protobuf to PutRequest"
  [input]
  (cis->PutRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record PutRequest-meta {:type "tikv.raw.PutRequest" :decoder pb->PutRequest})

;-----------------------------------------------------------------------------
; PutReply
;-----------------------------------------------------------------------------
(defrecord PutReply-record [error]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:error this) os))
  pb/TypeReflection
  (gettype [this]
    "tikv.raw.PutReply"))

(s/def ::PutReply-spec (s/keys :opt-un []))
(def PutReply-defaults {})

(defn cis->PutReply
  "CodedInputStream to PutReply"
  [is]
  (->> (tag-map PutReply-defaults
         (fn [tag index]
             (case index
               1 [:error (tikv.error/ecis->Error is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->PutReply-record)))

(defn ecis->PutReply
  "Embedded CodedInputStream to PutReply"
  [is]
  (serdes.core/cis->embedded cis->PutReply is))

(defn new-PutReply
  "Creates a new instance from a map, similar to map->PutReply except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::PutReply-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::PutReply-spec init))))]}
  (-> (merge PutReply-defaults init)
      (cond-> (some? (get init :error)) (update :error tikv.error/new-Error))
      (map->PutReply-record)))

(defn pb->PutReply
  "Protobuf to PutReply"
  [input]
  (cis->PutReply (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record PutReply-meta {:type "tikv.raw.PutReply" :decoder pb->PutReply})

